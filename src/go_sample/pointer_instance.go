/*
인스턴스: 메모리에 할당된 데이터의 실체.

var data Data
var p *Data = &data

이 경우는 p가 생성될 때 새로운 Data 인스턴스가 만들어진게 아님.

포인터를 이용해서 인스턴스에 접근할 수 있다.

구조체 포인터를 함수 매개변수로 받는다는 말은 구조체 인스턴스로 입력을 받는다와 같은말

포인터값 초기화 하는 방법
p1 := &Data{}
var p2 = new(Data)

func TestFunc() {
	u := &User{} // u 포인터 변수를 선언하고 인스턴스를 생성합니다.
	u.Age = 30
	fmt.Println(u)
}	// 내부 변수 u는 사라집니다. 더불어 인스턴스도 사라집니다.

• 인스턴스는 메모리에 생성된 데이터의 실체입니다.
• 포인터를 이용해서 인스턴스를 가리키게 할 수 있습니다.
• 함수 호출 시 포인터 인수를 통해서 인스턴스를 입력받고 그 값을 변경할 수 있게 됩니다.
• 쓸모 없어진 인스턴스는 가비지 컬렉터가 자동으로 지워줍니다.
*/

/*
대부분 프로그래밍 언어는 메모리를 할당할 때 스택 메모리 영 역 또는 힙 메모리 영 역을 사용합니
다. 이론상 스택 메모리 영역이 힙 메모리 영역보다 훨씬 효율적이기 때문에 스택 메모리 영역에
서 메모리를 할당하는 게 더 좋지만，스택 메모리는함수 내부에서만 사용 가능한 영역입니다. 그
래서 함수 외부로 공개되는 메모리 공간은 힙 메모리 영역에서 할당합니다. C/C++ 언어에서는
mallocO 함수를 직접 호출해서 힙 메모리 공간을 할당합니다. 자바에서는 클래스 타입을 힙에,
기본 타입을 스택에 할당합니다. Go 언어는 탈출 검사와caPe 빼lysis를 해서 어느 메모리에 할당할
지를 결정합니다.

함수 외부로 공개되는 인스턴스의 경우 함수가 종료되어도 사라지지 않습니다. 예제 코드를 보겠
습니다.
*/
package main

import "fmt"

type User struct {
	Name string
	Age  int
}

func NewUser(name string, age int) *User {
	var u = User{name, age}
	return &u // 탈출 분석으로 u 메모리가 사라지지 않음
	// 메모리 공간이 함수 외부로 공개되는지 여부를 자동으로 검사해서 스택 메모리에 할당할지 힙 메모리에 할당할지 결정합니다.
}

func main() {
	userPointer := NewUser("Test", 31)
	fmt.Println(userPointer)
}
